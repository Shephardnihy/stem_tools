import numpy as np
from skimage.feature import canny
from scipy.optimize import minimize
import matplotlib

def RotateClock(vx,vy,theta):
    """
    Written by Jordan Hachtel. Modified to use degrees by Michael Zachman.
    Rotate a vector field, typically used to compensate for non-zero scan-diffraction pattern rotation

    parameters
    ----------
    vx : 2d numpy array
        x component of a vector field
    
    vy : 2d numpy array
        y component of a vector field
    
    theta : float
        Scan-detector rotation angle (degree)
    
    returns
    -------
    rx : 2d numpy array
        rotated x-component of a vector field
    
    ry : 2d numpy array
        rotate y-component of a vector field
    """

    radtheta = theta*np.pi/180
    return vx*np.cos(radtheta)-vy*np.sin(radtheta),vx*np.sin(radtheta)+vy*np.cos(radtheta)

def GetTotalCurl(theta,vx,vy):
    """
    Written by Michael Zachman.
    Get the summed curl of a vector field

    parameters
    ----------
    theta : float
        Scan-detector rotation angle (degree)

    vx : 2d numpy array
        x component of a vector field
    
    vy : 2d numpy array
        y component of a vector field

    returns
    -------
    curl : float
        total curl summed from the entire region
    """
    rvx, rvy = RotateClock(vx, vy, theta)

    curl = -np.gradient(rvx)[0] + np.gradient(rvy)[1]
    return np.sum(np.abs(curl))

def GetScanDetRotCurl(vx, vy):
    """
    Written by Michael Zachman
    Get the relative angle between scanning and rotation by minimizing the curl of a DPC vector field. The DPC field generated by electromagnetic field should be curl-free, as stated by Maxwell's equations
    Note this method only applies if the DPC signal is contributed from the electromagnetic field under weak-phase object approximation. Such as Au NPs or magnetic field imaging.

    parameters
    ----------
    vx : 2d numpy array
        x component of a vector field
    
    vy : 2d numpy array
        y component of a vector field

    returns
    -------
    angle : float
        Estimated relative angle between scan and detector
    """
    print()

    ang = minimize(GetTotalCurl, 0, args = (vx, vy), method = 'Nelder-Mead')
    return ang.x

def GetFieldTraits(vx, vy):
    """
    Get traits of vector fields

    parameters
    ----------
    vx : 2d numpy array
        x component of a vector field
    
    vy : 2d numpy array
        y component of a vector field

    returns
    -------
    grad : 2d numpy array
        Gradient of the vector field
    
    curl : 2d numpy array
        Curl of the vector field

    mag : 2d numpy array
        Magnitude of a field
    """
    grad = np.gradient(vx)[1] + np.gradient(vy)[0]
    curl = -np.gradient(vx)[0] + np.gradient(vy)[1]
    mag = np.sqrt(vx**2 + vy**2)
    return grad, curl, mag